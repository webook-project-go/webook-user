// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/webook-project-go/webook-user/grpc"
	"github.com/webook-project-go/webook-user/ioc"
	"github.com/webook-project-go/webook-user/repository"
	"github.com/webook-project-go/webook-user/repository/cache"
	"github.com/webook-project-go/webook-user/repository/dao"
	"github.com/webook-project-go/webook-user/service"
)

// Injectors from wire.go:

func InitApp() *App {
	db := ioc.InitDatabase()
	daoDao := dao.NewDao(db)
	cmdable := ioc.InitRedis()
	cacheCache := cache.NewUserCache(cmdable)
	userRepository := repository.New(daoDao, cacheCache)
	userService := service.NewUserService(userRepository)
	authBindingRepository := repository.NewRepository(daoDao)
	authBindingService := service.NewAuthBindingService(authBindingRepository)
	grpcService := grpc.NewService(userService, authBindingService)
	client := ioc.InitEtcd()
	grpcxServer := ioc.InitGrpcServer(client)
	app := &App{
		Service: grpcService,
		Server:  grpcxServer,
	}
	return app
}

// wire.go:

var thirdPartyProvider = wire.NewSet(ioc.InitDatabase, ioc.InitRedis, ioc.InitEtcd, ioc.InitGrpcServer)

var serviceSet = wire.NewSet(service.NewAuthBindingService, service.NewUserService, repository.New, repository.NewRepository, dao.NewDao, cache.NewUserCache)
